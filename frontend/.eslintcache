[{"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/index.js":"1","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/App.js":"2","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/picture.js":"3","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/session.js":"4","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/csrf.js":"5","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/index.js":"6","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/Navigation/index.js":"7","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/SignupFormPage/index.js":"8","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/LoginFormPage/index.js":"9","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/MainPage/index.js":"10","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/PictureUploadForm/index.js":"11","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/Picture/index.js":"12","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/Navigation/ProfileButton.js":"13","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/UserPage/index.js":"14"},{"size":878,"mtime":1611943607226,"results":"15","hashOfConfig":"16"},{"size":1489,"mtime":1611953910544,"results":"17","hashOfConfig":"16"},{"size":2600,"mtime":1611943607230,"results":"18","hashOfConfig":"16"},{"size":2469,"mtime":1611943607231,"results":"19","hashOfConfig":"16"},{"size":1672,"mtime":1611943607229,"results":"20","hashOfConfig":"16"},{"size":750,"mtime":1611943607230,"results":"21","hashOfConfig":"16"},{"size":2278,"mtime":1611943607209,"results":"22","hashOfConfig":"16"},{"size":3583,"mtime":1611943607216,"results":"23","hashOfConfig":"16"},{"size":1882,"mtime":1611943607206,"results":"24","hashOfConfig":"16"},{"size":1064,"mtime":1611945015910,"results":"25","hashOfConfig":"16"},{"size":3042,"mtime":1611943607212,"results":"26","hashOfConfig":"16"},{"size":1739,"mtime":1611943607210,"results":"27","hashOfConfig":"16"},{"size":1440,"mtime":1611943607207,"results":"28","hashOfConfig":"16"},{"size":1760,"mtime":1611953940665,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1kqevk0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/index.js",[],["63","64"],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/App.js",["65"],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/picture.js",["66","67","68"],"import { fetch } from './csrf';\n\nconst LOAD = 'picture/LOAD';\nconst UPLOAD = 'picture/UPLOAD';\nconst PICTURE_LOAD = 'picture/PICTURE_UPLOAD';\n\nconst load = pictures => ({\n    type: LOAD,\n    pictures,\n});\n\nexport const addAPicture = (picture) => {\n    return {\n        type: UPLOAD,\n        picture,\n    }\n}\n\nexport const loadOnePicture = (picture) => {\n    return {\n        type: PICTURE_LOAD,\n        picture,\n    }\n}\n\nexport const getPictures = () => async dispatch => {\n    const response = await fetch(`/api/`)\n    const responseData = response.data.pictures;\n    dispatch(load(responseData));\n};\n\nexport const getOnePicture = (pictureId) => async dispatch => {\n    const response = await fetch(`/api/pictures/${pictureId}`);\n    const picture = await response.data.picture;\n    dispatch(loadOnePicture(picture))\n}\n\n\n// Code that can be used for something else\n// const response = await fetch(`/api/pictures`, {\n//     method: 'POST',\n//     body: JSON.stringify({\n//         image,\n//         title,\n//         description,\n//         userId,\n//     }),\n// });\n\nexport const uploadPicture = (picture) => async (dispatch) => {\n    const  { image, title, description, userId } = picture;\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"userId\", userId);\n    if (image) formData.append(\"image\", image);\n\n    let entryObj = {};\n\n    for (let entry of formData.entries()) {\n        let key = entry[0];\n        let value = entry[1];\n    }\n\n\n\n\n    const response = await fetch(`/api/pictures/`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"multipart/form-data\",\n        },\n        body: formData,\n    });\n    dispatch(addAPicture(response.data.picture));\n};\n\n// if (response.ok) {\n//     const picture = await response.json();\n//     dispatch(addAPicture(picture));\n//     return picture;\n// }\n\n//------\n\nconst intiialState = {}\n\nconst pictureReducer = (state = intiialState, action) => {\n    let newState;\n    switch(action.type) {\n        case LOAD: {\n            newState = [];\n            action.pictures.forEach(pic => {\n                newState[pic.id] = pic\n            })\n            return newState;\n        }\n        case UPLOAD: {\n            newState = Object.assign({}, state);\n            newState[action.picture.id] = action.picture\n            return newState;\n        }\n        case PICTURE_LOAD: {\n            newState = action.picture;\n            return newState;\n        }\n        default:\n            return state;\n    }\n}\n\nexport default pictureReducer;","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/session.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/csrf.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/store/index.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/Navigation/index.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/SignupFormPage/index.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/LoginFormPage/index.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/MainPage/index.js",["69","70"],"import React, { useEffect, useState } from 'react';\nimport * as sessionActions from '../../store/session';\nimport * as pictureActions from '../../store/picture';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './MainPage.css';\n\n//import data\n// use effect to dispatch a thunk that fetches all images.\n// use selector to subscribe to images/get access to pictures\n// map over pictures to renders\n\n//Needs to show all of the pictures that have been uploaded.\n    //Preferably in order from newest to oldest.\n\nconst MainPage = () => {\n    const dispatch = useDispatch();\n    const { getPictures } = pictureActions;\n\n    useEffect(() => {\n        dispatch(getPictures())\n    }, [dispatch, getPictures])\n    const pictures = useSelector((state) => state.picture);\n\n    return (\n    <>\n        <h1>Welcome to hell!</h1>\n            { pictures !== undefined && pictures.length > 1 && pictures.map((pics) => <a href={`/pictures/${pics.id}`}><img className=\"uploaded-picture\" src={pics.imageLink} alt=\"uploaded\" /></a>)}\n    </>)\n}\n\nexport default MainPage;","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/PictureUploadForm/index.js",["71","72"],"import React, { useEffect, useState } from 'react';\nimport * as sessionActions from '../../store/session';\nimport * as pictureActions from '../../store/picture';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './PictureUploadForm.css';\nimport { Redirect, useHistory } from 'react-router-dom';\n\n// Form needs to contain input for\n    //the image source\n    //a title for the image (optional)\n    //a description for the image (optional)\n    //any tags associated with the image (optional)\n\n    //posts to: TBD\n\nconst PictureUploadForm = () => {\n    const sessionUser = useSelector((state) => state.session.user);\n\n    const [image, setImage] = useState(null);\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    // const [tags, setTags] = useState([]);\n\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n\n    // const picture = useSelector((state) => state.picture);\n\n\n\n    if (!sessionUser) return <Redirect to=\"/login\" />;\n\n    const userId = sessionUser.id;\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        return dispatch(pictureActions.uploadPicture({ image, title, description, userId })).then(() => history.push('/'))\n    }\n\n    const updateFile = (e) => {\n        const file = e.target.files[0];\n        if (file) setImage(file);\n    };\n\n    return (\n        <>\n            <h1>Picture Upload!!!</h1>\n            <form onSubmit={handleSubmit} className=\"picture-upload-form\" action=\"/\" method=\"POST\">\n                <label>\n                    Upload an image!\n                    <br></br>\n                    <input \n                        type=\"file\" \n                        accept=\"image/png, image/jpeg\"\n                        // onChange={(e) => setImage(e.target.value)} \n                        // onChange={(e) => setImage(`http://${e.target.files.name}`)} \n                        onChange={updateFile} \n                    />\n                    \n                    \n                </label>\n                <br></br>\n                <br></br>\n                <label>\n                    Title:\n                    <br></br>\n                    <input \n                        type=\"text\" \n                        onChange={(e) => setTitle(e.target.value)} \n                        value={title} \n                    />\n                    <br></br>\n                    <br></br>\n                    <label>\n                    Description:\n                    <br></br>\n                    <textarea \n                        className=\"description\"\n                        type=\"text\"\n                        onChange={(e) => setDescription(e.target.value)}\n                        value={description}\n                    />\n                    </label>\n                </label>\n                <br></br>\n                <br></br>\n                <button disabled={!image ? true : false} type=\"submit\">Add your picture!</button>\n            </form>\n        </>\n    )\n}\n\nexport default PictureUploadForm;","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/Picture/index.js",["73","74","75"],"import React, { useEffect, useState } from 'react';\nimport * as sessionActions from '../../store/session';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Picture.css';\nimport { useParams } from 'react-router-dom';\nimport * as pictureActions from '../../store/picture';\n\n//Will use useParams to get the pictureId.\n//Needs to display\n     //the image\n     //who uploaded it\n     //any descriptions or tags\n     //comments\n\nconst Picture = () => {\n    const { pictureId } = useParams();\n    const dispatch = useDispatch();\n    const picture = useSelector((state) => state.picture);\n\n    const { getPictures, getOnePicture } = pictureActions;\n\n    useEffect(() => {\n        dispatch(getOnePicture(pictureId))\n    }, [dispatch, getOnePicture, pictureId])\n\n\n    // const correctPicture = pictures.find((pic) => pic.id === pictureId)\n\n    console.log(picture)\n\n    // const loadedPictures = pictures.length > 0 ? pictures : null;\n\n    // console.log(loadedPictures)\n\n    // if (loadedPictures > 0) {\n    //     const correctPicture = loadedPictures.find((pic) => pic.id === pictureId)\n    //     console.log(correctPicture)\n    // }\n\n    \n    return (\n        <>\n            {/* <h1>Pictures!!!</h1> */}\n            { picture !== undefined && <img className=\"uploaded-picture\" src={picture.imageLink} alt=\"uploaded\" /> }\n            {/* { pictures !== undefined && pictures.length > 1 && pictures.map((pics) => <a href={`/pictures/${pics.id}`}><img className=\"uploaded-picture\" src={pics.imageLink} alt=\"uploaded\" /></a>)} */}\n            {/* { pictures !== undefined && pictures.length > 1 && <img className=\"uploaded-picture\" src={correctPicture.imageLink} alt=\"uploaded\" /> } */}\n        </>\n    )\n}\n\nexport default Picture;","/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/Navigation/ProfileButton.js",[],"/Users/matthewhasan/Project/React-Solo-Project/frontend/src/components/UserPage/index.js",["76","77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":10,"column":8,"nodeType":"85","messageId":"86","endLine":10,"endColumn":22},{"ruleId":"83","severity":1,"message":"87","line":58,"column":9,"nodeType":"85","messageId":"86","endLine":58,"endColumn":17},{"ruleId":"83","severity":1,"message":"88","line":61,"column":13,"nodeType":"85","messageId":"86","endLine":61,"endColumn":16},{"ruleId":"83","severity":1,"message":"89","line":62,"column":13,"nodeType":"85","messageId":"86","endLine":62,"endColumn":18},{"ruleId":"83","severity":1,"message":"90","line":1,"column":28,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"91","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":27},{"ruleId":"83","severity":1,"message":"92","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":27},{"ruleId":"83","severity":1,"message":"90","line":1,"column":28,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"91","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":27},{"ruleId":"83","severity":1,"message":"93","line":20,"column":13,"nodeType":"85","messageId":"86","endLine":20,"endColumn":24},{"ruleId":"83","severity":1,"message":"90","line":1,"column":28,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"91","line":2,"column":13,"nodeType":"85","messageId":"86","endLine":2,"endColumn":27},{"ruleId":"83","severity":1,"message":"93","line":20,"column":13,"nodeType":"85","messageId":"86","endLine":20,"endColumn":24},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'configureStore' is defined but never used.","Identifier","unusedVar","'entryObj' is assigned a value but never used.","'key' is assigned a value but never used.","'value' is assigned a value but never used.","'useState' is defined but never used.","'sessionActions' is defined but never used.","'useEffect' is defined but never used.","'getPictures' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]